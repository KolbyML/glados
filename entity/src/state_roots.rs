//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7
use alloy_primitives::B256;
use anyhow::Result;
use rand::Rng;
use sea_orm::{entity::prelude::*, QuerySelect, Set};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "state_roots")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub block_number: i32,
    #[sea_orm(unique)]
    pub state_root: Vec<u8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

pub async fn get_or_create(
    block_number: i32,
    state_root: Vec<u8>,
    conn: &DatabaseConnection,
) -> Result<Model> {
    // First try to lookup an existing entry.
    if let Some(state_root_model) = Entity::find_by_id(block_number).one(conn).await? {
        // If there is an existing record, return it
        return Ok(state_root_model);
    }

    // If no record exists, create one and return it
    let content_key = ActiveModel {
        block_number: Set(block_number),
        state_root: Set(state_root),
    };
    Ok(content_key.insert(conn).await?)
}

pub async fn get(block_number: i32, conn: &DatabaseConnection) -> Result<Option<Model>> {
    Ok(Entity::find_by_id(block_number).one(conn).await?)
}

pub async fn get_random_state_root(conn: &DatabaseConnection) -> Result<Option<Model>> {
    let row_count = Entity::find().count(conn).await? as f64;
    let offset = (rand::thread_rng().gen::<f64>() * row_count).floor() as u64;
    Ok(Entity::find().offset(offset).one(conn).await?)
}

/// These are helper functions for glados-web.
impl Model {
    pub fn block_number(&self) -> i32 {
        self.block_number
    }

    pub fn state_root(&self) -> B256 {
        B256::from_slice(&self.state_root)
    }
}
